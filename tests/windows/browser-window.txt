Browser, BrowserContext, and Page
1. Browser
• Represents an actual browser instance (like Chromium, Firefox, or WebKit).
• Created using playwright.chromium.launch(), firefox.launch(), or webkit.launch().
• It's a heavyweight object—ideally created once per test suite.
• Supports headless or headed mode.
Example:
import { chromium, Browser } from 'playwright';
const browser: Browser = await chromium.launch({ headless: false });
2. BrowserContext
• Think of it as a new, isolated user session (like an incognito profile).
• It shares the underlying browser instance but has separate cookies, cache, local
storage, etc.
• You can have multiple contexts in one browser—ideal for multi-user testing.
Why use it?
• Isolation between tests.
• Efficient parallel test execution using the same browser process.
Example:
import { BrowserContext } from 'playwright';
const context: BrowserContext = await browser.newContext();
3. Page
• Represents a tab inside a browser context.
• Most interactions (click, fill, navigate, etc.) happen through the Page object.
• You can create multiple pages per context.
Example:
import { Page } from 'playwright';
const page: Page = await context.newPage();
await page.goto('https://example.com');
await page.click('text=Login');
Hierarchy Overview
Browser
└── BrowserContext (1..n)
└── Page (1..n)